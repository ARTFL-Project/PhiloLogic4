import sys
import re
from BeautifulSoup import BeautifulStoneSoup as bss
#REQUIRES BeautifulSoup3.  BS4 breaks on Python recursion errors when it gets badly damaged texts.

def cleanup(infile,outfile):
# main routine.  takes a file handle for input and output; called at the bottom of the file.
    text = infile.read()
    # custom regexes for things that BeautifulSoup can't handle go here.  Keep to a minimum.  Below examples are for the Encyc.
    # text = re.sub(r"<\?>",r"<gap reason='omitted' unit='character' />",text)
    # text = re.sub(r"<\->",r"<gap reason='omitted' unit='bracket' />",text)
    # text = re.sub(r"<MVO_PIM=\"(.*?)\">",r'<figure><graphic url="\g<1>"></graphic></figure>',text)
    # text = re.sub(r"<omit=(.*?)>",r"<gap reason='omitted' unit='\g<1>' />",text)
    print len(text)
    soup = bss(text,selfClosingTags=self_closing)
    for tag in soup.findAll():
        if tag.name in fix_case:
            tag.name = fix_case[tag.name]
    print >> outfile,soup
    outfile.close()

#Annoyingly, BeautifulSoup requires you to declare ALL self-closing tags yourself; it will badly mangle your text if you miss one, so get this right.
self_closing = ["p","index","pb","milestone","col","c","omit","hr1","hr2","hr3","file_group","gap","volume"]

#BeautifulSoup lowercases all element names; to get things closer to standard TEI, I've included a list here which I use to restore them after parsing
capitalized_elements = [
"accMat",
"addName",
"addrLine",
"addSpan",
"adminInfo",
"altGrp",
"altIdent",
"altIdentifier",
"appInfo",
"attDef",
"attList",
"attRef",
"biblFull",
"biblScope",
"biblStruct",
"binaryObject",
"bindingDesc",
"calendarDesc",
"castGroup",
"castItem",
"castList",
"catDesc",
"catRef",
"charDecl",
"charName",
"charProp",
"citedRange",
"classCode",
"classDecl",
"classRef",
"classSpec",
"constraintSpec",
"cRefPattern",
"custEvent",
"custodialHist",
"damageSpan",
"decoDesc",
"decoNote",
"defaultVal",
"delSpan",
"dictScrap",
"divGen",
"docAuthor",
"docDate",
"docEdition",
"docImprint",
"docTitle",
"editionStmt",
"editorialDecl",
"egXML",
"eLeaf",
"elementRef",
"elementSpec",
"encodingDesc",
"entryFree",
"eTree",
"fDecl",
"fDescr",
"figDesc",
"fileDesc",
"finalRubric",
"fLib",
"floatingText",
"fsConstraints",
"fsdDecl",
"fsDecl",
"fsDescr",
"fsdLink",
"fvLib",
"genName",
"geoDecl",
"geogFeat",
"geogName",
"glyphName",
"gramGrp",
"handDesc",
"handNote",
"handNotes",
"handShift",
"headItem",
"headLabel",
"iNode",
"interpGrp",
"iType",
"joinGrp",
"lacunaEnd",
"lacunaStart",
"langKnowledge",
"langKnown",
"langUsage",
"layoutDesc",
"linkGrp",
"listApp",
"listBibl",
"listChange",
"listEvent",
"listForest",
"listNym",
"listOrg",
"listPerson",
"listPlace",
"listPrefixDef",
"listRef",
"listRelation",
"listTranspose",
"listWit",
"localName",
"locusGrp",
"macroRef",
"macroSpec",
"measureGrp",
"memberOf",
"metDecl",
"metSym",
"moduleRef",
"moduleSpec",
"msContents",
"msDesc",
"msIdentifier",
"msItem",
"msItemStruct",
"msName",
"msPart",
"musicNotation",
"nameLink",
"notatedMusic",
"notesStmt",
"objectDesc",
"objectType",
"oRef",
"orgName",
"origDate",
"origPlace",
"oVar",
"particDesc",
"persName",
"personGrp",
"physDesc",
"placeName",
"postBox",
"postCode",
"pRef",
"prefixDef",
"profileDesc",
"projectDesc",
"publicationStmt",
"pubPlace",
"pVar",
"rdgGrp",
"recordHist",
"recordingStmt",
"refsDecl",
"refState",
"relatedItem",
"relationGrp",
"respStmt",
"revisionDesc",
"roleDesc",
"roleName",
"samplingDecl",
"schemaSpec",
"scriptDesc",
"scriptNote",
"scriptStmt",
"sealDesc",
"secFol",
"seriesStmt",
"settingDesc",
"soCalled",
"socecStatus",
"sourceDesc",
"sourceDoc",
"spanGrp",
"specDesc",
"specGrp",
"specGrpRef",
"specList",
"spGrp",
"stdVals",
"styleDefDecl",
"substJoin",
"superEntry",
"supportDesc",
"surfaceGrp",
"tagsDecl",
"tagUsage",
"TEI",
"teiCorpus",
"teiHeader",
"textClass",
"textDesc",
"textLang",
"titlePage",
"titlePart",
"titleStmt",
"typeDesc",
"typeNote",
"unicodeName",
"valDesc",
"valItem",
"valList",
"vAlt",
"variantEncoding",
"vColl",
"vDefault",
"vLabel",
"vMerge",
"vNot",
"vRange",
"witDetail",
"witEnd",
"witStart",
"interpGrp",
"spanGrp",
"addrLine",
"biblScope",
"biblStruct",
"binaryObject",
"citedRange",
"divGen",
"headItem",
"headLabel",
"listBibl",
"measureGrp",
"postBox",
"postCode",
"pubPlace",
"relatedItem",
"respStmt",
"soCalled",
"teiCorpus",
"textLang",
"particDesc",
"settingDesc",
"textDesc",
"dictScrap",
"entryFree",
"gramGrp",
"iType",
"oRef",
"oVar",
"pRef",
"pVar",
"superEntry",
"castGroup",
"castItem",
"castList",
"roleDesc",
"spGrp",
"figDesc",
"notatedMusic",
"charDecl",
"charName",
"charProp",
"glyphName",
"localName",
"unicodeName",
"appInfo",
"biblFull",
"cRefPattern",
"calendarDesc",
"catDesc",
"catRef",
"classCode",
"classDecl",
"editionStmt",
"editorialDecl",
"encodingDesc",
"fileDesc",
"geoDecl",
"handNote",
"langUsage",
"listChange",
"listPrefixDef",
"notesStmt",
"prefixDef",
"profileDesc",
"projectDesc",
"publicationStmt",
"refState",
"refsDecl",
"revisionDesc",
"samplingDecl",
"scriptNote",
"seriesStmt",
"sourceDesc",
"stdVals",
"styleDefDecl",
"tagUsage",
"tagsDecl",
"teiHeader",
"textClass",
"titleStmt",
"typeNote",
"fDecl",
"fDescr",
"fLib",
"fsConstraints",
"fsDecl",
"fsDescr",
"fsdDecl",
"fsdLink",
"fvLib",
"vAlt",
"vColl",
"vDefault",
"vLabel",
"vMerge",
"vNot",
"vRange",
"altGrp",
"joinGrp",
"linkGrp",
"accMat",
"adminInfo",
"altIdentifier",
"bindingDesc",
"custEvent",
"custodialHist",
"decoDesc",
"decoNote",
"finalRubric",
"handDesc",
"layoutDesc",
"locusGrp",
"msContents",
"msDesc",
"msIdentifier",
"msItem",
"msItemStruct",
"msName",
"msPart",
"musicNotation",
"objectDesc",
"objectType",
"origDate",
"origPlace",
"physDesc",
"recordHist",
"scriptDesc",
"sealDesc",
"secFol",
"supportDesc",
"typeDesc",
"addName",
"genName",
"geogFeat",
"geogName",
"langKnowledge",
"langKnown",
"listEvent",
"listNym",
"listOrg",
"listPerson",
"listPlace",
"listRelation",
"nameLink",
"orgName",
"persName",
"personGrp",
"placeName",
"relationGrp",
"roleName",
"socecStatus",
"eLeaf",
"eTree",
"iNode",
"listForest",
"recordingStmt",
"scriptStmt",
"altIdent",
"attDef",
"attList",
"attRef",
"classRef",
"classSpec",
"constraintSpec",
"defaultVal",
"egXML",
"elementRef",
"elementSpec",
"listRef",
"macroRef",
"macroSpec",
"memberOf",
"moduleRef",
"moduleSpec",
"schemaSpec",
"specDesc",
"specGrp",
"specGrpRef",
"specList",
"valDesc",
"valItem",
"valList",
"lacunaEnd",
"lacunaStart",
"listApp",
"listWit",
"rdgGrp",
"variantEncoding",
"witDetail",
"witEnd",
"witStart",
"TEI",
"docAuthor",
"docDate",
"docEdition",
"docImprint",
"docTitle",
"floatingText",
"titlePage",
"titlePart",
"addSpan",
"damageSpan",
"delSpan",
"handNotes",
"handShift",
"listTranspose",
"sourceDoc",
"substJoin",
"surfaceGrp",
"metDecl",
"metSym",
]

fix_case = {}

for el in capitalized_elements:
    fix_case[el.lower()] = el

for filename in sys.argv[1:]:
    print >> sys.stderr, "Cleaning %s" % filename
    filenameout = filename + ".xml"
    infile = open(filename)
    outfile = open(filenameout,"w")
    cleanup(infile,outfile)
    
