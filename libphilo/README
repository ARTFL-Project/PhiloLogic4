The Indexer

Pack4
Usage: `pack4 [dbspecs4 file] < all_words_sorted`
To compile pack4 on its own, the only files that seem to be required are db.c, db.h, pack.c, pack.h, and c.h.
It can be made with the makefile in the db directory. I’m currently unsure if the lack of certain shared object
files created by the makefile in the top directory will cause any issues.
When run from the command line, the first argument it expects is a dbspec file, which is generated by the python
script Loader.py. In init_dbspec_file in db.c, it parses the file into a struct made specifically to represent
that filetype, a philo_dbspec defined in db.h.
It then initializes a hitbuffer, a struct defined in pack.h, in new_hb in pack.c. That function initializes a
gbdm database. Pack then begins reading input from stdin. It expects lines in the tab delimited format
“word\t%s\t%d %d %d %d %d %d %d %d %d”. If it reads in ten values, it calls hitbuffer functions which ultimately
add the entry to the gdbm database. It stores the most recent word to determine if it needs to add a new entry
or not because the file which contains the word data is sorted.
The function which actually initiates the writing of the data to the database is hitbuffer_inc.

Search4
Usage: `search4 [--ascii --corpussize c --corpusfile f --limit l] [database directory] [search method] [search arg] < search`
	Almost all other files than those needed for pack4, it seems, with possible minimal exceptions, are required to compile search4.

Current issues
	- There are a huge number of compiler warnings, these should all be eliminated and the code should in the future
	be compiled with -Wall. Many of the warnings are from deprecated snippets of code for which the standard has changed,
	or strange hacky things. (WARNINGS FIXED)
	- There are bizarre type aliases, defined in c.h, which should be done away with and replaced with normal types.
	- There’s a huge amount of ultimately unnecessary compression which is a large barrier to adding new features.


How to Search
If searching for a single word, the phrase method will do. Just that word followed by the end of the standard input stream will return all occurrences.
For multiple words which are to be taken together (i.e. an exact phrase) , they must be presented in the order that they should appear with two newlines between them, e.g. “the\n\nking”.

The functioning of each search method is as follows:
- cooc returns cooccurrences within the specified division level.
- proxy returns occurences of words within a specified number of words of each other
- sentence returns occurences of words and their sentences within a division.
- phrase returns occurrences of given words exactly a specified number of sentences apart from each other

